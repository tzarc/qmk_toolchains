---
name: (internal) Invoke `crosstool-ng`

on:
  workflow_call:
    inputs:
      crosstool_host_os: { type: string, required: true }
      build_host: { type: string, required: true }
      target_host: { type: string, required: true }
      build_script: { type: string, required: true }
      fetch_bootstrap: { type: boolean, required: false, default: true }
      toolchain_suffix: { type: string, required: false, default: "" }
      phase_number: { type: number, required: true }
      script_args: { type: string, required: false, default: "+finish" }
      restore_state: { type: boolean, required: false, default: true }
      save_state: { type: boolean, required: false, default: true }
      toolchain_tarball: { type: boolean, required: false, default: false }

env:
  TC_WORKDIR: "/t"
  EXECUTE_UNDER_DOCKER: true
  GIT_DISCOVERY_ACROSS_FILESYSTEM: true

jobs:
  invoke-crosstool:
    name: ${{ inputs.phase_number }}. ct-ng ${{ inputs.script_args }}
    runs-on: ubuntu-latest

    steps:
      - name: Fixup memory overcommit
        run: |
          set -x
          cat /proc/sys/vm/overcommit_memory
          sudo sysctl -w vm.overcommit_memory=2
          cat /proc/sys/vm/overcommit_memory

      - name: Maximize build space
        uses: tzarc/maximize-build-space@btrfs-mods
        with:
          btrfs-compression: "true"
          build-mount-path: /b
          root-reserve-mb: 2048
          swap-size-mb: 32768
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc

      - name: Clone toolchains repo
        uses: actions/checkout@v5

      - name: Setup workdir
        run: |
          set -x
          # Shorten the path to `/t` because the normal path to the workspace is too long for some build configurations
          sudo mkdir $TC_WORKDIR
          sudo mount --bind $GITHUB_WORKSPACE $TC_WORKDIR

      - name: Cache check
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            state.tar
            build_logs.tar.zst
            qmk_toolchain-gcc*-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}.tar.zst
          key: cache-${{ inputs.crosstool_host_os }}-${{ inputs.build_host }}-${{ inputs.target_host }}${{ inputs.toolchain_suffix }}-phase${{ inputs.phase_number }}-${{ hashFiles('.github/workflows/**', '${{ inputs.build_script }}', 'Dockerfile*', 'common.bashinc') }}

      - name: Look at all this space for activities
        run: |
          set -x
          sudo free -h
          sudo swapon --show
          sudo df -h
          sudo mount | column -t

      - name: Download source tarballs
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v6
        with:
          name: tarballs

      - name: Extract source tarballs
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          set -x
          df -h .
          tar axf tarballs.tar.zst

      - name: Download bootstrap toolchain
        if: steps.cache.outputs.cache-hit != 'true' && inputs.fetch_bootstrap == true
        uses: actions/download-artifact@v6
        with:
          name: toolchain-host_${{ inputs.crosstool_host_os }}-target_${{ inputs.crosstool_host_os }}_qmk_bootstrap

      - name: Extract bootstrap toolchain
        if: steps.cache.outputs.cache-hit != 'true' && inputs.fetch_bootstrap == true
        run: |
          set -x
          mkdir -p toolchains
          tar avxf qmk_toolchain*host_${{ inputs.crosstool_host_os }}-target_${{ inputs.crosstool_host_os }}_qmk_bootstrap.tar.zst -C toolchains
          rm qmk_toolchain*host_${{ inputs.crosstool_host_os }}-target_${{ inputs.crosstool_host_os }}_qmk_bootstrap.tar.zst

      - name: Determine previous phase number
        if: steps.cache.outputs.cache-hit != 'true' && inputs.restore_state == true
        run: |
          echo LAST_PHASE_NUMBER=$((${{ inputs.phase_number }} - 1)) >> $GITHUB_ENV

      - name: Download build state
        if: steps.cache.outputs.cache-hit != 'true' && inputs.restore_state == true
        uses: actions/download-artifact@v6
        with:
          name: state-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}-phase${{ env.LAST_PHASE_NUMBER }}

      - name: Extract build state
        if: steps.cache.outputs.cache-hit != 'true' && inputs.restore_state == true
        run: |
          set -x
          cd $TC_WORKDIR
          # Ensure tarballs are extracted before we restore state as we've deleted $CT_COMMON_SRC_DIR before saving the state tarball
          ./${{ inputs.build_script }} +companion_tools_for_build
          # Extract the state tarball
          tar axf state.tar

      - name: Look at all this space for activities (pre-build)
        if: always() && !cancelled()
        run: |
          set -x
          sudo free -h
          sudo swapon --show
          sudo df -h
          sudo mount | column -t

      - name: Build toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          (while true; do
            echo "[$(date +%H:%M:%S)] Mem: $(free -h | grep Mem | awk '{print $3"/"$2}') Swap: $(free -h | grep Swap | awk '{print $3"/"$2}')"
            # Check if we're in the critical linking phase
            if pgrep -f "collect2.*cc1\|collect2.*lto1" > /dev/null; then
              echo "[$(date +%H:%M:%S)] *** CRITICAL: cc1/lto1 linking in progress ***"
            fi
            sleep 10
          done) &
          MONITOR_PID=$!

          set -x
          cd $TC_WORKDIR

          # Kick off the requested build phase (kill after 5h45m so logs can be gathered)
          timeout 19800 ./${{ inputs.build_script }} ${{ inputs.script_args }}

          kill $MONITOR_PID 2>/dev/null || true

      - name: Look at all this space for activities (post-build)
        if: always() && !cancelled()
        run: |
          set -x
          sudo free -h
          sudo swapon --show
          sudo df -h
          sudo mount | column -t

      - name: Gather build logs
        if: always() && !cancelled()
        run: |
          set -x
          find . \( -name \*.log \) -print0 | xargs -0 tar acvf build_logs.tar.zst || true

      - name: Upload build logs
        uses: actions/upload-artifact@v5
        if: always() && !cancelled()
        with:
          name: build.log-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}-phase${{ inputs.phase_number }}
          path: |
            build_logs.tar.zst

      - name: Make build state
        if: steps.cache.outputs.cache-hit != 'true' && inputs.save_state == true
        run: |
          set -x
          # We're saving state so we can resume at each step -- some of the internal build directories can be blown away as restarting from a step will recreate them.
          latest_state=$(dirname $(find $(find build -mindepth 4 -maxdepth 5 -type d -name state) -mindepth 2 -maxdepth 2 -type f -name env.sh -print0 | xargs -0r stat -c '%w|%n' | sort | cut -d'|' -f2 | tail -n1))
          tar acf state.tar $latest_state

      - name: Upload build state
        if: inputs.save_state == true
        uses: actions/upload-artifact@v5
        with:
          name: state-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}-phase${{ inputs.phase_number }}
          path: state.tar
          overwrite: true

      - name: Make toolchain tarball
        if: steps.cache.outputs.cache-hit != 'true' && inputs.toolchain_tarball == true
        run: |
          set -x
          if [[ "${{ inputs.build_host }}" == "windowsX64" ]] || [[ "${{ inputs.build_host }}" == "windowsARM64" ]]; then
            export DEREF_SYMLINKS_ARGS="--dereference --hard-dereference"
          fi
          latest_state=$(dirname $(find $(find build -mindepth 4 -maxdepth 5 -type d -name state) -mindepth 2 -maxdepth 2 -type f -name env.sh -print0 | xargs -0r stat -c '%w|%n' | sort | cut -d'|' -f2 | tail -n1))
          source "$latest_state/env.sh"
          tar avcf qmk_toolchain-gcc${CT_GCC_VERSION}-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}.tar.zst -C toolchains host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }} ${DEREF_SYMLINKS_ARGS:-}

      - name: Upload toolchain
        if: inputs.toolchain_tarball == true
        uses: actions/upload-artifact@v5
        with:
          name: toolchain-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}
          path: |
            qmk_toolchain-gcc*-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}.tar.zst

      - name: Space, the final job step
        run: |
          set -x
          sudo df -h
          sudo mount | column -t
